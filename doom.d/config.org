#+TITLE: EE's Doom Emacs Config#+AUTHOR: Evan Erickson (EE)#+PROPERTY: header-args:emacs-lisp :tangle ./config.el#+auto_tangle: t#+STARTUP: showeverything* TABLE OF CONTENTS :toc:- [[#about-this-config][ABOUT THIS CONFIG]]- [[#personal-information][PERSONAL INFORMATION]]- [[#doom-theme][DOOM THEME]]- [[#fonts][FONTS]]- [[#line-settings][LINE SETTINGS]]- [[#dashboard][DASHBOARD]]- [[#file-management][FILE MANAGEMENT]]- [[#org-mode][ORG MODE]]  - [[#org-capture][Org-capture]]  - [[#org-agenda][Org-agenda]]  - [[#org-auto-tangle][Org-auto-tangle]]- [[#email-settings][EMAIL SETTINGS]]- [[#lsp-settings][LSP SETTINGS]]- [[#markdown-and-mmm-mode][MARKDOWN AND MMM-MODE]]- [[#other][OTHER]]- [[#language-specific-settings][LANGUAGE SPECIFIC SETTINGS]]- [[#dap-mode-settings][DAP-MODE SETTINGS]]- [[#custom-keybindings][CUSTOM KEYBINDINGS]]- [[#emacs-application-framework][EMACS APPLICATION FRAMEWORK]]- [[#open-keybindings][OPEN KEYBINDINGS]]- [[#other-config-files][OTHER CONFIG FILES]]* ABOUT THIS CONFIGThis is my personal Doom Emacs config. Doom Emacs is a distribution of Emacs that uses the "evil" keybindings (Vim keybindings) and includes a number of nice extensions and a bit of configuration out of the box.To compile this file run directly:| COMMAND             | DESCRIPTION            | KEYBINDING ||---------------------+------------------------+------------|| org-babel-load-file | Load org file          | SPC f b    |#+BEGIN_SRC emacs-lisp(map! :leader      (:prefix ("f" . "file")       :desc "Load org file" "b" #'org-babel-load-file))#+END_SRC* PERSONAL INFORMATION#+BEGIN_SRC emacs-lisp(setq user-full-name "Evan Erickson"      user-mail-address "evan@emcode.io")#+END_SRC* DOOM THEMEThere are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme` function. This is the default:#+BEGIN_SRC emacs-lisp(setq doom-theme 'doom-xcode)(custom-theme-set-faces! 'doom-xcode  ;;'(default :background "#1C1C1C")  '(default :background "#151515")  ;;'(default :background "#000000")  )(custom-theme-set-faces! 'doom-monokai-classic  ;;'(default :background "#1C1C1C")  '(default :background "#151515")  ;;'(default :background "#000000")  )(custom-theme-set-faces! 'doom-dracula  ;;'(default :background "#1C1C1C")  '(default :background "#151515")  ;;'(default :background "#000000")  )(custom-theme-set-faces! 'doom-palenight  ;;'(default :background "#1C1C1C")  '(default :background "#151515")  ;;'(default :background "#000000")  )#+END_SRC* FONTSSettings related to fonts within Doom Emacs:+ 'doom-font' -- standard monospace font that is used for most things in Emacs.+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.+ 'font-lock-comment-face' -- for comments.+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.+ 'global-prettify-symbols-mode' -- change certain keywords to symbols, such as lambda!| COMMAND       | DESCRIPTION             | KEYBINDING ||---------------+-------------------------+------------|| doom-big-font | Increases the font size | SPC t b    |#+BEGIN_SRC emacs-lisp(setq doom-font (font-spec :family "Dank Mono" :size 15)      doom-big-font (font-spec :family "Dank Mono" :size 24))(after! doom-themes  (setq doom-themes-enable-bold t        doom-themes-enable-italic t))(custom-set-faces!  '(font-lock-comment-face :slant italic)  '(font-lock-keyword-face :slant italic))#+END_SRC* LINE SETTINGSI set comment-line to 'SPC TAB TAB' which is a rather comfortable keybinding for me on my ZSA Moonlander keyboard.  The standard Emacs keybinding for comment-line is 'C-x C-;'.  The other keybindings are for commands that toggle on/off various line-related settings.  Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t' plus 'key' for those bindings.| COMMAND                  | DESCRIPTION                                 | KEYBINDING  ||--------------------------+---------------------------------------------+-------------|| comment-line             | /Comment or uncomment lines/                | SPC TAB TAB || hl-line-mode             | /Toggle line highlighting in current frame/ | SPC t h     || global-hl-line-mode      | /Toggle line highlighting globally/         | SPC t H     || doom/toggle-line-numbers | /Toggle line numbers/                       | SPC t l     || toggle-truncate-lines    | /Toggle truncate lines/                     | SPC t t     |#+BEGIN_SRC emacs-lisp(setq display-line-numbers-type t)(map! :leader      (:prefix ("t" . "toggle")       :desc "Comment or uncomment lines" "/" #'comment-line       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers       :desc "Toggle line highlight in frame" "h" #'hl-line-mode       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines))#+END_SRC* DASHBOARD#+begin_src emacs-lisp;; (use-package dashboard;;   :init      ;; tweak dashboard config before loading it;;   (setq dashboard-set-heading-icons t);;   (setq dashboard-set-file-icons t);;   (setq dashboard-banner-logo-title "\nKEYBINDINGS:\;; \nFind file               (SPC .)     \;; Open buffer list    (SPC b i)\;; \nFind recent files       (SPC f r)   \;; Open the eshell     (SPC e s)\;; \nOpen dired file manager (SPC d d)   \;; List of keybindings (SPC h b b)");;   ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner;;   (setq dashboard-startup-banner "~/.config/doom/doom-emacs-dash.png")  ;; use custom image as banner;;   (setq dashboard-center-content nil) ;; set to 't' for centered content;;   (setq dashboard-items '((recents . 5);;                           (agenda . 5 );;                           (bookmarks . 5);;                           (projects . 5);;                           (registers . 5)));;   :config;;   (dashboard-setup-startup-hook);;   (dashboard-modify-heading-icons '((recents . "file-text");;                                     (bookmarks . "book"))))#+end_src* FILE MANAGEMENTMain configuration of Dired. Creates the following keybindings:| COMMAND                  | DESCRIPTION                             | KEYBINDING ||--------------------------+-----------------------------------------+------------|| dired-up-directory       | Go up directory from the current        | h          || dired-find-file          | Go into directory or open file at point | l          || xah-dired-sort           | Choose sort type                        | o          |as well as turns on auto revert, delete files and directories immediately instead of moving them to the trash, and turn off warning for opening large file.#+begin_src  emacs-lisp(use-package! dired    :commands (dired dired-jump)    :config    (evil-collection-define-key 'normal 'dired-mode-map      "h" 'dired-up-directory      "l" 'dired-find-file      "o" 'xah-dired-sort))(after! dired  (setq dired-listing-switches "-agho --si --time-style long-iso --group-directories-first"))(setq global-auto-revert-non-file-buffers t)(setq delete-by-moving-to-trash nil)(setq large-file-warning-threshold nil)#+end_srcTo use Dired as my main file manager, I prefer opening some file types with programs outside of Emacs. That is where the 'openwith' package comes in. The following configures 'openwith' and enables it after startup.#+begin_src  emacs-lisp(use-package! openwith  :init  ;; Prevents openwith from messing up email attachments  (require 'mm-util)  :config    (setq openwith-associations      (list       (list (openwith-make-extension-regexp              '("pdf" "heic" "png" "jpg" "flac"                "jpeg" "gif"))             "open"             '(file))       (list (openwith-make-extension-regexp              '("mpg" "mpeg" "mp3" "mp4"                "avi" "wmv" "wav" "mov" "flv"                "ogm" "ogg" "mkv" "flac"))             "open"             '(file))       ;; '("\\.chm" "kchmviewer" (file))       ))    (add-hook! 'after-init-hook #'openwith-mode)    ;; Prevents openwith from messing up email attachments    (add-to-list 'mm-inhibit-file-name-handlers 'openwith-file-handler))#+end_srcNice function to sort a Dired buffer according to "Name", "Time", "Size", and "Directory/File"#+begin_src  emacs-lisp(defun xah-dired-sort ()  "Sort dired dir listing in different ways.   Prompt for a choice.   URL `http://ergoemacs.org/emacs/dired_sort.html'   Version 2015-07-30"  (interactive)  (let (-sort-by -arg)    (setq -sort-by (ido-completing-read "Sort by:" '( "time" "size" "name" "dir")))    (cond     ((equal -sort-by "name") (setq -arg "-agho --si --time-style long-iso "))     ((equal -sort-by "time") (setq -arg "-agho --si --time-style long-iso -t"))     ((equal -sort-by "size") (setq -arg "-agho --si --time-style long-iso -S"))     ((equal -sort-by "dir") (setq -arg "-agho --si --time-style long-iso --group-directories-first"))     (t (error "logic error 09535" )))    (dired-sort-other -arg )))#+end_srcFunction to get the size of a directory in Dired#+begin_src  emacs-lisp(defun dired-get-size () (interactive) (let ((files (dired-get-marked-files)))   (with-temp-buffer     (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)     (message "Size of all marked files: %s"              (progn                (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")                 (match-string 1))))))#+end_srcI prefer to not have a million Dired buffers be created when navigating. The 'dired+' package reuses the current Dired buffer when navigating.#+begin_src  emacs-lisp(use-package! dired+  :config  (diredp-toggle-find-file-reuse-dir 1)  (setq diredp-hide-details-initially-flag nil)  (setq diredp-hide-details-propagate-flag nil))#+end_srcConfigures 'dired-hide-dotfiles' and creates the following keybinding| COMMAND                  | DESCRIPTION                             | KEYBINDING ||--------------------------+-----------------------------------------+------------|| dired-hide-dotfiles-mode | Toggles showing/hiding dotfiles         | f          |#+begin_src  emacs-lisp(use-package! dired-hide-dotfiles  :hook (dired-mode . dired-hide-dotfiles-mode)  :config  (evil-collection-define-key 'normal 'dired-mode-map    "f" 'dired-hide-dotfiles-mode))#+end_srcScratch stuff I'm playing around with#+begin_src  emacs-lisp;; (map! :leader;;       :prefix "o";;       :desc "Dired at current location" "c" #'dired-jump;;       ;; :desc "Open $HOME in dired" "h" (λ! (dired-switch-to-dir "~/"));;       ;; :desc "Open root in dired"  "r" (λ! (dired-switch-to-dir "/"));;       )#+end_src* ORG MODE#+begin_src emacs-lisp(after! org  (setq org-directory "~/Documents/org/"        org-agenda-files        (list         "inbox.org"         "events.org"         "projects.org")        org-ellipsis " ▽ "        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")        org-superstar-item-bullet-alist '((?+ . ?‣) (?- . ?∙)) ; changes +/- symbols in item lists        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords        '((sequence           "TODO(t)"           ; A task that is ready to be tackled           "NEXT(n)"           ; A task that is ready to be tackled           "PROJ(p)"           ; A project that contains other tasks           "WAIT(w)"           ; Something is holding up this task           "|"                 ; The pipe necessary to separate "active" states and "inactive" states           "DONE(d)"           ; Task has been completed           "CANCELLED(c)" )))) ; Task has been cancelled(advice-add 'org-refile :after 'org-save-all-org-buffers)(advice-add 'org-agenda-kill :after 'org-save-all-org-buffers)(custom-set-faces  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))  '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))(defun efs/org-mode-visual-fill ()  (setq visual-fill-column-width 120        visual-fill-column-center-text t)  (visual-fill-column-mode 1))(use-package! visual-fill-column  :hook (org-mode . efs/org-mode-visual-fill))#+end_src** Org-captureThere are my capture templates#+begin_src emacs-lisp(defvar my-org-capture-filename nil  "File name for org capture template.")(defun my-org-capture ()  "Read file name to capture to."  (interactive)  (setq my-org-capture-filename        (read-file-name "Capture to: " "~/Documents/org"                        nil t "inbox.org"))  (call-interactively #'org-capture))(after! org-capture  (setq org-capture-templates        `(("i" "Inbox" entry (file "inbox.org")           "* TODO %?")          ("e" "Event" entry (file+datetree "events.org")           ,(concat "* %?\n"             "<%<%Y-%m-%d %a %^{Time}>>")           :time-prompt t)          ("j" "Journal" checkitem (file+olp "projects.org" "SINGLES" "Journaling Ideas")           "+ [ ] %?")          ("m" "Inbox [mu4e]" entry (file "inbox.org")           "* TODO Email: \"%a\"\n%i%?"           :immediate-finish t)           ;; ("n" "Note" entry (file "inbox.org")           ;;  ,(concat "* Note (%a)\n"           ;;           "%U\n" "%?"))          ("n" "Next" entry (file "inbox.org")           "* NEXT %?")          ("p" "Project")          ("pp" "Personal Project" entry (file+olp "projects.org" "PERSONAL")           ;; replace %? with %^{Project title} to be prompted           ,(concat "* PROJ %? [\/]\n"                    ":PROPERTIES:\n"                    ":CATEGORY:\n"                    ":COOKIE_DATA: recursive todo\n"                    ":END:\n"                    "** Why?\n"                          ":PROPERTIES:\n"                          ":VISIBILITY: hide\n"                          ":END:\n"                    "** Notes\n"                          ":PROPERTIES:\n"                          ":VISIBILITY: hide\n"                          ":END:\n"                    "** Tasks\n"                          ":PROPERTIES:\n"                          ":VISIBILITY: content\n"                          ":END:\n"))          ("pw" "Personal Project" entry (file+olp "projects.org" "WORK")           ,(concat "* PROJ %? [\/]\n"                    ":PROPERTIES:\n"                    ":CATEGORY:\n"                    ":COOKIE_DATA: recursive todo\n"                    ":END:\n"                    "** Why?\n"                          ":PROPERTIES:\n"                          ":VISIBILITY: hide\n"                          ":END:\n"                    "** Notes\n"                          ":PROPERTIES:\n"                          ":VISIBILITY: hide\n"                          ":END:\n"                    "** Tasks\n"                          ":PROPERTIES:\n"                          ":VISIBILITY: content\n"                          ":END:\n"))))  (regexp-opt '("Tasks" "Notes"))  (setq org-refile-targets        '(("projects.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")         ;;  ("inbox.org" :maxlevel . 3)          ("projects.org" :regexp . "Single Personal Tasks")          ("projects.org" :regexp . "Single Work Tasks")          ))  (setq org-refile-use-outline-path 'file)  (setq org-outline-path-complete-in-steps nil))#+end_src** Org-agenda#+begin_src emacs-lisp(defun eme/org-create-header-string (&optional org-element)  "Returns a formated string. Abbreviated if it is over a certain length. Original otherwise."  (let ((str (car (cdr (org-get-outline-path org-element)))))    (if (< (length str) 20)        (concat "[Project: " str "]")      (concat "[Project: " (substring str 0 19) "...]"))))(defun org-archive-done (&optional arg)  (org-todo 'done))(advice-add 'org-archive-subtree :before 'org-archive-done)(after! org-agenda  (setq org-agenda-custom-commands        '(("n" "Next Tasks"           ((todo "NEXT"                  ((org-agenda-overriding-header "Next Tasks")))))          ("g" . "Get Things Done (GTD)")          ("gw" "Work"           ((agenda ""                    ((org-agenda-skip-function                      '(org-agenda-skip-entry-if 'deadline))                     (org-deadline-warning-days 0)))            ;; (agenda nil            ;;         ((org-agenda-entry-types '(:deadline))            ;;          (org-agenda-format-date "")            ;;          (org-deadline-warning-days 7)            ;;          (org-agenda-skip-function            ;;           '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))            ;;          (org-agenda-overriding-header "\nDeadlines")))            (             ;; todo "NEXT"             tags-todo "+work/!NEXT"                  ((org-agenda-skip-function                    '(org-agenda-skip-entry-if 'deadline))                   (org-agenda-prefix-format                    "        %-41(eme/org-create-header-string)")                   ;; (org-agenda-prefix-format "  %i %-12:c [%e] ")                   (org-agenda-overriding-header "\nTasks\n")))            (tags-todo "+inbox"                       ((org-agenda-prefix-format "  %?-12t% s")                        (org-agenda-overriding-header "\nInbox\n")))            ;; (tags "CLOSED>=\"<today>\""            ;;       ((org-agenda-overriding-header "\nCompleted today\n")))            (tags-todo "+work/!WAIT"                  ((org-agenda-prefix-format                    "        %-41(eme/org-create-header-string)")                   ;; (org-agenda-prefix-format "  %i %-12:c [%e] ")                   (org-agenda-overriding-header "\nWaiting\n")))            ))          ("gp" "Personal"           ((agenda ""                    ((org-agenda-skip-function                      '(org-agenda-skip-entry-if 'deadline))                     (org-deadline-warning-days 0)))            ;; (agenda nil            ;;         ((org-agenda-entry-types '(:deadline))            ;;          (org-agenda-format-date "")            ;;          (org-deadline-warning-days 7)            ;;          (org-agenda-skip-function            ;;           '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))            ;;          (org-agenda-overriding-header "\nDeadlines")))            (tags-todo "+personal/!NEXT"                  ((org-agenda-skip-function                    '(org-agenda-skip-entry-if 'deadline))                   (org-agenda-prefix-format                    "        %-41(eme/org-create-header-string)")                   ;; (org-agenda-prefix-format "  %i %-12:c [%e] ")                   (org-agenda-overriding-header "\nTasks\n")))            (tags-todo "+inbox"                       ((org-agenda-prefix-format "  %?-12t% s")                        (org-agenda-overriding-header "\nInbox\n")))            ;; (tags "CLOSED>=\"<today>\""            ;;       ((org-agenda-overriding-header "\nCompleted today\n")))            (tags-todo "+personal/!WAIT"                  ((org-agenda-prefix-format                    "        %-41(eme/org-create-header-string)")                   ;; (org-agenda-prefix-format "  %i %-12:c [%e] ")                   (org-agenda-overriding-header "\nWaiting\n")))            )))))#+end_srcSetting up custom keybindings for custom Agenda access:| COMMAND                | DESCRIPTION       | KEYBINDING ||------------------------+-------------------+------------|| (org-agenda nil "gpw") | View GTD Work     | SPC n w    || (org-agenda nil "gpw") | View GTD Personal | SPC n p    |#+BEGIN_SRC emacs-lisp(map! :leader      (:prefix ("n" . "notes")       :desc "View GTD Work" "w" #'(lambda ()                                      (interactive)                                      (org-agenda nil "gw"))       :desc "View GTD Personal" "p" #'(lambda ()                                      (interactive)                                      (org-agenda nil "gp"))))#+END_SRC** Org-auto-tangleAutomatically tangles org files#+begin_src emacs-lisp(use-package! org-auto-tangle  :defer t  :hook (org-mode . org-auto-tangle-mode)  :config  (setq org-auto-tangle-default t))#+end_src* EMAIL SETTINGSI use Mu4e to access my email using Emacs#+begin_src emacs-lisp(defun eme/capture-mail-headers (msg)  (interactive)  (call-interactively 'org-store-link)  (org-capture nil "m")  (mu4e-headers-mark-for-refile))(defun eme/capture-mail-view (msg)  (interactive)  (call-interactively 'org-store-link)  (org-capture nil "m")  (mu4e-view-mark-for-refile))(defun eme/store-link-to-mu4e-query ()  (interactive)  (let ((mu4e-org-link-query-in-headers-mode t))    (call-interactively 'org-store-link)))(use-package! mu4e  :load-path "/opt/homebrew/opt/mu/share/emacs/site-lisp/mu/mu4e"  :config  (require 'smtpmail)  ;; installed this with homebrew  (setq mu4e-mu-binary (executable-find "mu"))  ;; mu4e mail directory:  (setq mu4e-maildir "~/.maildir")  ;; this command is called to sync imap servers:  (setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))  ;; how often to call it in seconds:  (setq mu4e-update-interval (* 5 60))  ;; save attachment to ~/inbox by default  (setq mu4e-attachment-dir "~/inbox")  ;; rename files when moving - needed for mbsync:  (setq mu4e-change-filenames-when-moving t)  ;; Make sure plain text mails flow correctly for recipients  (setq mu4e-compose-format-flowed t)  ;; list of email adresses:  (setq mu4e-user-mail-address-list '("evan_e@icloud.com"                                      "evan@emcode.io"                                      "evan.erksn@gmail.com"                                      "ericenna@gmail.com"                                      "eerickson@phasechange.ai"))  ;; Add custom actions for our capture templates  (add-to-list 'mu4e-headers-actions               '("org capture" . eme/capture-mail-headers) t)  (add-to-list 'mu4e-view-actions               '("org capture" . eme/capture-mail-view) t)  ;; make bookmarks  (add-to-list 'mu4e-bookmarks               (make-mu4e-bookmark                :name "Inbox - Work"                :query "maildir:/work/INBOX"                :key ?w))  (add-to-list 'mu4e-bookmarks               (make-mu4e-bookmark                :name "Inbox - Spam"                :query "maildir:/ericenna-gmail/INBOX"                :key ?s))  (add-to-list 'mu4e-bookmarks               (make-mu4e-bookmark                :name "Inbox - Gamil"                :query "maildir:/evan.erksn-gmail/INBOX"                :key ?g))  (add-to-list 'mu4e-bookmarks               (make-mu4e-bookmark                :name "Inbox - iCloud"                :query "maildir:/icloud/INBOX"                :key ?a))  (add-to-list 'mu4e-bookmarks               (make-mu4e-bookmark                :name "All Inboxes"                :query "m:/icloud/INBOX or m:/evan.erksn-gmail/INBOX or m:/ericenna-gmail/INBOX or m:/work/INBOX"                :key ?i))  ;; creating contexts  (setq mu4e-contexts         (list          ;; Emcode account          (make-mu4e-context           :name "Emcode"           :match-func           (lambda (msg)             (when msg               (string-prefix-p "/icloud" (mu4e-message-field msg :maildir))))           :vars '((user-mail-address . "evan@emcode.io" )                   (user-full-name . "Evan Erickson")                   (mu4e-drafts-folder . "/icloud/Drafts")                   (mu4e-refile-folder . "/icloud/Archive")                   (mu4e-sent-folder . "/icloud/Sent Messages")                   (mu4e-trash-folder . "/icloud/Deleted Messages")))          ;; iCloud acount          (make-mu4e-context           :name "iCloud"           :match-func           (lambda (msg)             (when msg               (string-prefix-p "/icloud" (mu4e-message-field msg :maildir))))           :vars '((user-mail-address  . "evan_e@icloud.com" )                   (user-full-name     . "Evan Erickson")                   (mu4e-drafts-folder . "/icloud/Drafts")                   (mu4e-refile-folder . "/icloud/Archive")                   (mu4e-sent-folder   . "/icloud/Sent Messages")                   (mu4e-trash-folder  . "/icloud/Deleted Messages")))          ;; Gmail account          (make-mu4e-context           :name "Gmail"           :match-func           (lambda (msg)             (when msg               (string-prefix-p "/evan.erksn-gmail" (mu4e-message-field msg :maildir))))           :vars '((user-mail-address  . "evan.erksn@gmail.com")                   (user-full-name     . "Evan Erickson")                   (mu4e-drafts-folder . "/evan.erksn-gmail/[Gmail]/Drafts")                   (mu4e-sent-folder   . "/evan.erksn-gmail/[Gmail]/Sent Mail")                   (mu4e-refile-folder . "/evan.erksn-gmail/[Gmail]/All Mail")                   (mu4e-trash-folder  . "/evan.erksn-gmail/[Gmail]/Trash")))          ;; Spam gmail account          (make-mu4e-context           :name "Spam"           :match-func           (lambda (msg)             (when msg               (string-prefix-p "/ericenna-gmail" (mu4e-message-field msg :maildir))))           :vars '((user-mail-address  . "ericenna@gmail.com")                   (user-full-name     . "Evan Erickson")                   (mu4e-drafts-folder . "/ericenna-gmail/[Gmail]/Drafts")                   (mu4e-sent-folder   . "/ericenna-gmail/[Gmail]/Sent Mail")                   (mu4e-refile-folder . "/ericenna-gmail/[Gmail]/All Mail")                   (mu4e-trash-folder  . "/ericenna-gmail/[Gmail]/Trash")))          ;; Work account          (make-mu4e-context           :name "Work"           :match-func           (lambda (msg)             (when msg               (string-prefix-p "/work" (mu4e-message-field msg :maildir))))           ;; :name "Work"           ;; :enter-func           ;; (lambda () (mu4e-message "Enter eerickson@phasechange.ai context"))           ;; :leave-func           ;; (lambda () (mu4e-message "Leave eerickson@phasechange.ai context"))           ;; :match-func           ;; (lambda (msg)           ;;   (when msg           ;;     (or (mu4e-message-contact-field-matches msg           ;;                                             :to "eerickson@phasechange.ai")           ;;         (mu4e-message-contact-field-matches msg           ;;                                             :to "company@phasechange.ai"))))           :vars '((user-mail-address  . "eerickson@phasechange.ai")                   (user-full-name     . "Evan Erickson")                   (mu4e-drafts-folder . "/work/Drafts")                   (mu4e-sent-folder   . "/work/Sent Items")                   (mu4e-refile-folder . "/work/Archive")                   (mu4e-trash-folder  . "/work/Trash")))))  (setq mu4e-context-policy 'pick-first) ;; start with the first (default) context;  (setq mu4e-compose-context-policy 'ask) ;; ask for context if no context matches;  ;; SENDING SETTINGS  ;; gpg encryptiom & decryption:  ;; this can be left alone  (require 'epa-file)  (epa-file-enable)  (setq epa-pinentry-mode 'loopback)  (auth-source-forget-all-cached)  ;; don't keep message compose buffers around after sending:  (setq message-kill-buffer-on-exit t)  ;; send function:  ;; (setq send-mail-function 'sendmail-send-it)  (setq send-mail-function 'sendmail-send-it        message-send-mail-function 'sendmail-send-it        ;; send program:        sendmail-program (executable-find "msmtp")        ;; select the right sender email from the context.        mail-specify-envelope-from t        mail-envelope-from 'header        message-sendmail-envelope-from 'header)  ;; Turn off Org-msg-mode by default  (setq mu4e-compose--org-msg-toggle-next nil)  ;; mu4e cc & bcc  (add-hook 'mu4e-compose-mode-hook            (defun timu/add-cc-and-bcc ()              "My Function to automatically add Cc & Bcc: headers.               This is in the mu4e compose mode."              (save-excursion (message-add-header "Cc:\n"))              (save-excursion (message-add-header "Bcc:\n"))))  ;; mu4e address completion  (add-hook 'mu4e-compose-mode-hook 'company-mode)  ;; COSMETICS  (setq +mu4e-main-bullet "‣")  (setq mu4e-headers-thread-child-prefix '("├>" . "├─➤ ")        mu4e-headers-thread-last-child-prefix '("└>" . "└─➤ ")        mu4e-headers-thread-orphan-prefix '("┬>" . "┬─➤ ")        mu4e-headers-thread-single-orphan-prefix '("─>" . "──➤ ")        ;; The following two should have the same width.        mu4e-headers-thread-connection-prefix '("│" . "│ ")        mu4e-headers-thread-blank-prefix '(" " . " ")))#+end_srcOrg-mime allows emacs to compose emails in org mode.#+begin_src emacs-lisp;; (defun em/send ();;   "Prompt user for email type";;   (interactive);;   (let (n);;     (setq n ())))(use-package! org-mime  :config  (setq org-mime-export-options '(:section-numbers nil                                  :with-author nil                                  :with-toc nil))  (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart)  ;; (add-hook 'org-mime-html-hook  ;;           (lambda ()  ;;             (org-mime-change-element-style  ;;              "pre" (format "background-color %s; padding: 0.5em;"  ;;                            "#232323"))))  )#+end_srcCustom keybindings for emails| COMMAND             | DESCRIPTION                   | KEYBINDING ||---------------------+-------------------------------+------------|| +mu4e/compose       | Open email composition buffer | SPC e      |#+begin_src emacs-lisp(map! :leader      (:desc "Compose email" "e" #'+mu4e/compose))#+end_srcI've added some custom Local leader key| COMMAND                        | DESCRIPTION              | KEYBINDING ||--------------------------------+--------------------------+------------|| org-mime-htmlize               | Convert to HTML email    | SPC m h    || org-mime-edit-mail-in-org-mode | Edit email in org buffer | SPC m o    |#+begin_src emacs-lisp(map! :map mu4e-compose-mode-map      :localleader      :desc "convert to html email" "h" #'org-mime-htmlize      :desc "edit email in org buffer" "o" #'org-mime-edit-mail-in-org-mode)#+end_src* LSP SETTINGS| COMMAND                  | DESCRIPTION                       | KEYBINDING ||--------------------------+-----------------------------------+------------|| lsp-find-definition      | Jump to method definition         | SPC l d    || lsp-find-references      | Show method references            | SPC l r    |#+BEGIN_SRC emacs-lisp(setq display-line-numbers-type t)(map! :leader      (:prefix ("l" . "lsp")       :desc "Jump to method definition" "d" #'lsp-find-definition       :desc "Show method references" "r" #'lsp-find-references))#+END_SRC* MARKDOWN AND MMM-MODE#+BEGIN_SRC emacs-lisp(setq mmm-global-mode 'maybe)(defun my-mmm-markdown-auto-class (lang &optional submode)  "Define a mmm-mode class for LANG in `markdown-mode' using SUBMODE.If SUBMODE is not provided, use `LANG-mode' by default."  (let ((class (intern (concat "markdown-" lang)))        (submode (or submode (intern (concat lang "-mode"))))        (front (concat "^```" lang "[\n\r]+"))        (back "^```"))    (mmm-add-classes (list (list class :submode submode :front front :back back)))    (mmm-add-mode-ext-class 'markdown-mode nil class)))#+END_SRCMode names that derive directly from the language name#+BEGIN_SRC emacs-lisp(mapc 'my-mmm-markdown-auto-class      '("awk" "bibtex" "c" "cpp" "css" "html" "latex" "lisp" "makefile"        "markdown" "python" "r" "ruby" "sql" "stata" "xml" "cobol"))#+END_SRCMode names that differ from the language name#+BEGIN_SRC emacs-lisp(my-mmm-markdown-auto-class "fortran" 'f90-mode)(my-mmm-markdown-auto-class "perl" 'cperl-mode)(my-mmm-markdown-auto-class "shell" 'shell-script-mode)#+END_SRC* OTHERHere are some additional functions/macros that could help you configure Doom:- `load!' for loading external *.el files relative to this one- `use-package!' for configuring packages- `after!' for running code after a package has loaded- `add-load-path!' for adding directories to the `load-path', relative to this file. Emacs searches the `load-path' when you load packages with `require' or `use-package'. - `map!' for binding new keysTo get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k'). This will open documentation for it, including demos of how they are used.You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.#+BEGIN_SRC emacs-lisp(use-package! ace-window  :config    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))(use-package! key-chord  :config    (key-chord-mode 1)    (setq key-chord-two-keys-delay 0.05)    (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)    (key-chord-define-global "vv" 'ace-window))(use-package! evil  :config  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)  (evil-global-set-key 'motion "j" 'evil-next-visual-line)  (evil-global-set-key 'motion "k" 'evil-previous-visual-line));;(add-to-list 'initial-frame-alist '(fullscreen . maximized))(setq initial-frame-alist      '(        ;;(top . 1)        ;;(left . 1)        (width . 143)        (height . 55)))(defun org-mode-<>-syntax-fix (start end)  (when (eq major-mode 'org-mode)    (save-excursion      (goto-char start)      (while (re-search-forward "<\\|>" end t)    (when (get-text-property (point) 'src-block)      ;; This is a < or > in an org-src block      (put-text-property (point) (1- (point))                 'syntax-table (string-to-syntax "_")))))));; (font-lock-add-keywords 'org-mode;;                         '(("^ *\\([-]\\) ";;                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‣"))))));; (after! org;;   (add-hook 'org-mode-hook (λ! (org-bullets-mode 1)));;   (add-hook 'org-mode-hook;;       (λ!;;         (setq syntax-propertize-function 'org-mode-<>-syntax-fix);;         (syntax-propertize (point-max))));;   (setq org-directory "~/Org/";;         org-agenda-files '("~/Org/agenda.org");;         org-default-notes-file (expand-file-name "notes.org" org-directory);;         org-ellipsis " ∇";;         org-log-done 'time;;         org-journal-dir "~/Org/journal/";;         org-journal-date-format "%B %d, %Y (%A) ";;         org-journal-file-format "%Y-%m-%d.org";;         ;; org-hide-emphasis-markers nil;;         ;; ex. of org-link-abbrev-alist in action;;         ;; [[arch-wiki:Name_of_Page][Description]];;         org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list;;           '(("google" . "http://www.google.com/search?q=");;             ("arch-wiki" . "https://wiki.archlinux.org/index.php/");;             ("ddg" . "https://duckduckgo.com/?q=");;             ("wiki" . "https://en.wikipedia.org/wiki/"));;         org-todo-keywords        ; This overwrites the default Doom org-todo-keywords;;           '((sequence;;              "TODO(t)"           ; A task that is ready to be tackled;;              "BLOG(b)"           ; Blog writing assignments;;              "GYM(g)"            ; Things to accomplish at the gym;;              "PROJ(p)"           ; A project that contains other tasks;;              "VIDEO(v)"          ; Video assignments;;              "WAIT(w)"           ; Something is holding up this task;;              "|"                 ; The pipe necessary to separate "active" states and "inactive" states;;              "DONE(d)"           ; Task has been completed;;              "CANCELLED(c)" ));;         org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿"))) ; Task has been cancelled(setq org-latex-listings 'minted      org-latex-packages-alist '(("" "minted"))      org-latex-pdf-process      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))(map! :leader      (:desc "Open in Finder" "z" #'reveal-in-osx-finder))(setq projectile-project-search-path '("~/dev/"))(setq org-latex-caption-above nil);; (setq org-src-fontify-natively t)#+END_SRCTurn on global auto-revert buffer#+BEGIN_SRC emacs-lisp(global-auto-revert-mode 1)#+END_SRC* LANGUAGE SPECIFIC SETTINGS#+BEGIN_SRC emacs-lisp;; (when (executable-find "ipython");;  (setq python-shell-interpreter "ipython"))#+END_SRCCode to add hooks when opening a COBOL file. Turns on syntax highlightin with `cobol-mode` and enforces line length with `column-enforce-mode`#+BEGIN_SRC emacs-lisp(add-to-list 'auto-mode-alist             '("\\.cob\\'" . (λ! ()                               ;; add major mode setting here, if needed, for example:                               ;; (text-mode)                               (cobol-mode)                               (column-enforce-mode))))#+END_SRCDap-mode for Python#+BEGIN_SRC emacs-lisp;; (dap-register-debug-template;;   "Python :: Run (test)";;   (list :type "python";;         :cwd (file-name-directory buffer-file-name);;         :module "pytest";;         :request "launch";;         ;; :target-module (expand-file-name "~/src/myapp/.env/bin/myapp");;         :debugger 'debugpy;;         :name "Python :: Run (test)"))(use-package python-mode  :hook (python-mode . run-python)  :hook (python-mode . lsp-deferred)  :custom  (dap-python-executable "python3")  (dap-python-debugger 'debugpy))(add-hook 'java-mode-hook #'(lambda() (gradle-mode 1)))(defun build-and-run ()	(interactive)	(gradle-run "build run"))(map! :after java      :map gradle-mode-map      :leader      :prefix ("j" . "java")      ;; basics      :desc "Gradel Build Run"          "r" #'build-and-run);; (define-key gradle-mode-map (kbd "C-c C-r") 'build-and-run)#+END_SRC* DAP-MODE SETTINGS| COMMAND     | DESCRIPTION                  | KEYBINDING ||-------------+------------------------------+------------|| dap-next    | Dap debugger next breakpoint | SPC d n    || dap-step-in | Dap debugger step into       | SPC d i    || dap-step-in | Dap debugger step into       | SPC d i    |#+BEGIN_SRC emacs-lisp(map! :map dap-mode-map      :leader      :prefix ("d" . "dap")      ;; basics      :desc "dap next"          "n" #'dap-next      :desc "dap step in"       "i" #'dap-step-in      :desc "dap step out"      "o" #'dap-step-out      :desc "dap continue"      "c" #'dap-continue      :desc "dap disconnect"    "x" #'dap-disconnect      :desc "dap hydra"         "h" #'dap-hydra      :desc "dap debug restart" "r" #'dap-debug-restart      :desc "dap debug"         "s" #'dap-debug      ;; debug      :prefix ("dd" . "Debug")      :desc "dap debug recent"  "r" #'dap-debug-recent      :desc "dap debug last"    "l" #'dap-debug-last      ;; eval      :prefix ("de" . "Eval")      :desc "eval"                "e" #'dap-eval      :desc "eval region"         "r" #'dap-eval-region      :desc "eval thing at point" "s" #'dap-eval-thing-at-point      :desc "add expression"      "a" #'dap-ui-expressions-add      :desc "remove expression"   "d" #'dap-ui-expressions-remove      :prefix ("db" . "Breakpoint")      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition      :desc "dap breakpoint delete all"  "d" #'dap-breakpoint-delete-all      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message);; (after! dap-mode;;   (setq dap-python-debugger 'debugpy))#+END_SRC* CUSTOM KEYBINDINGS#+BEGIN_SRC emacs-lisp(map! :leader      (:prefix ("b" . "buffer")       :desc "Kill buffers matching" "o" #'kill-matching-buffers))(map! :leader      (:prefix ("b" . "buffer")       :desc "Switch workspace buffer" "B" #'+vertico/switch-workspace-buffer))(map! :leader      (:prefix ("b" . "buffer")       :desc "Switch buffer" "b" #'switch-to-buffer))(set-fringe-style (quote (12 . 8)))(map! :leader      (:desc "Open Vterm" "v" #'vterm))(map! :leader      (:desc "Org Capture" "SPC" #'org-capture))(map! :leader      (:desc "Find file in project" "x" #'projectile-find-file))(map! :leader      (:desc "Find file in project" "X" #'doom/open-scratch-buffer))(map! :leader      (:desc "Switch workspace buffer" "<" #'+vertico/switch-workspace-buffer))(map! :leader      (:desc "Switch buffer" "," #'switch-to-buffer))(map! :leader      (:desc "Kill buffer" "k" #'kill-buffer))(map! :leader      (:prefix ("s" . "search")       :desc "Search Kill Ring" "k" #'consult-yank-pop))#+END_SRC* EMACS APPLICATION FRAMEWORK#+BEGIN_SRC emacs-lisp;; (require 'eaf-demo);; (require 'eaf-file-sender);; (require 'eaf-music-player);; (require 'eaf-camera);; (require 'eaf-rss-reader);; (require 'eaf-terminal);; (require 'eaf-image-viewer);; (require 'eaf-vue-demo);; (require 'eaf-pdf-viewer);; (require 'eaf-browser);; (require 'eaf-markdown-previewer);; (require 'eaf-file-browser);; (require 'eaf-mermaid);; (require 'eaf-file-manager);; (require 'eaf-mindmap);; (require 'eaf-video-player);; (require 'eaf-org-previewer);; (require 'eaf-airshare);; (require 'eaf-jupyter);; (require 'eaf-netease-cloud-music);; (require 'eaf-git);; (require 'eaf-system-monitor)#+END_SRC#+BEGIN_SRC emacs-lisp(require 'org-tempo)(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))#+END_SRC* OPEN KEYBINDINGS#+BEGIN_SRC emacs-lisp(map! :leader      (:prefix ("o" . "open")       :desc "View Calendar" "g" #'calendar))#+END_SRC* OTHER CONFIG FILESDEPRECATED: Same functionality achieved with org-auto-tangle package.Code to auto-tangle this zshrc.org file whenever it is saved to automatically produce the zshrc file.#+begin_src emacs-lisp;; (defun efs/org-babel-tangle-zshrc ();;   (when (string-equal (buffer-file-name);;                       (expand-file-name "~/.dotfiles/zshrc.org"));;     (let ((org-confirm-babel-evaluate nil));;       (org-babel-tangle))));; (add-hook 'org-mode-hook (λ! (add-hook 'after-save-hook #'efs/org-babel-tangle-zshrc)))#+end_src