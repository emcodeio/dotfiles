#+TITLE: EE's Doom Emacs Config#+AUTHOR: Evan Erickson (EE)#+STARTUP: showeverything#+PROPERTY: header-args:emacs-lisp :tangle ./config.el* ABOUT THIS CONFIGThis is my personal Doom Emacs config. Doom Emacs is a distribution of Emacs that uses the "evil" keybindings (Vim keybindings) and includes a number of nice extensions and a bit of configuration out of the box.Code to auto-tangle this config.org file whenever it is saved to automatically produce the config.el file.#+begin_src emacs-lisp(defun efs/org-babel-tangle-config ()  (when (string-equal (buffer-file-name)                      (expand-file-name "~/.dotfiles/doom.d/config.org"))    (let ((org-confirm-babel-evaluate nil))      (org-babel-tangle))))(add-hook 'org-mode-hook (λ! (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))#+end_srcTo compile this file run directly:| COMMAND             | DESCRIPTION            | KEYBINDING ||---------------------+------------------------+------------|| org-babel-load-file | Load org file          | SPC f b    |#+BEGIN_SRC emacs-lisp(map! :leader      (:prefix ("f" . "file")       :desc "Load org file" "b" #'org-babel-load-file))#+END_SRC* PERSONAL INFORMATION#+BEGIN_SRC emacs-lisp(setq user-full-name "Evan Erickson"      user-mail-address "evan@emcode.io")#+END_SRC* DOOM THEMEThere are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme` function. This is the default:#+BEGIN_SRC emacs-lisp(setq doom-theme 'doom-xcode)(custom-theme-set-faces! 'doom-xcode  ;;'(default :background "#1C1C1C")  '(default :background "#151515")  ;;'(default :background "#000000")  )(custom-theme-set-faces! 'doom-monokai-classic  ;;'(default :background "#1C1C1C")  '(default :background "#151515")  ;;'(default :background "#000000")  )(custom-theme-set-faces! 'doom-dracula  ;;'(default :background "#1C1C1C")  '(default :background "#151515")  ;;'(default :background "#000000")  )(custom-theme-set-faces! 'doom-palenight  ;;'(default :background "#1C1C1C")  '(default :background "#151515")  ;;'(default :background "#000000")  )#+END_SRC* FONTSSettings related to fonts within Doom Emacs:+ 'doom-font' -- standard monospace font that is used for most things in Emacs.+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.+ 'font-lock-comment-face' -- for comments.+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.+ 'global-prettify-symbols-mode' -- change certain keywords to symbols, such as lambda!| COMMAND       | DESCRIPTION             | KEYBINDING ||---------------+-------------------------+------------|| doom-big-font | Increases the font size | SPC t b    |#+BEGIN_SRC emacs-lisp(setq doom-font (font-spec :family "Dank Mono" :size 15)      doom-big-font (font-spec :family "Dank Mono" :size 24))(after! doom-themes  (setq doom-themes-enable-bold t        doom-themes-enable-italic t))(custom-set-faces!  '(font-lock-comment-face :slant italic)  '(font-lock-keyword-face :slant italic))#+END_SRC* LINE SETTINGSI set comment-line to 'SPC TAB TAB' which is a rather comfortable keybinding for me on my ZSA Moonlander keyboard.  The standard Emacs keybinding for comment-line is 'C-x C-;'.  The other keybindings are for commands that toggle on/off various line-related settings.  Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t' plus 'key' for those bindings.| COMMAND                  | DESCRIPTION                               | KEYBINDING  ||--------------------------+-------------------------------------------+-------------|| comment-line             | /Comment or uncomment lines/                | SPC TAB TAB || hl-line-mode             | /Toggle line highlighting in current frame/ | SPC t h     || global-hl-line-mode      | /Toggle line highlighting globally/         | SPC t H     || doom/toggle-line-numbers | /Toggle line numbers/                       | SPC t l     || toggle-truncate-lines    | /Toggle truncate lines/                     | SPC t t     |#+BEGIN_SRC emacs-lisp(setq display-line-numbers-type t)(map! :leader      (:prefix ("t" . "toggle")       :desc "Comment or uncomment lines" "/" #'comment-line       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers       :desc "Toggle line highlight in frame" "h" #'hl-line-mode       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines))#+END_SRC* FILE MANAGEMENTMain configuration of Dired. Creates the following keybindings:| COMMAND                  | DESCRIPTION                             | KEYBINDING ||--------------------------+-----------------------------------------+------------|| dired-up-directory       | Go up directory from the current        | h          || dired-find-file          | Go into directory or open file at point | l          || xah-dired-sort           | Choose sort type                        | o          |as well as turns on auto revert, delete files and directories immediately instead of moving them to the trash, and turn off warning for opening large file.#+begin_src  emacs-lisp(use-package! dired    :commands (dired dired-jump)    :config    (evil-collection-define-key 'normal 'dired-mode-map      "h" 'dired-up-directory      "l" 'dired-find-file      "o" 'xah-dired-sort))(after! dired  (setq dired-listing-switches "-agho --si --time-style long-iso --group-directories-first"))(setq global-auto-revert-non-file-buffers t)(setq delete-by-moving-to-trash nil)(setq large-file-warning-threshold nil)#+end_srcTo use Dired as my main file manager, I prefer opening some file types with programs outside of Emacs. That is where the 'openwith' package comes in. The following configures 'openwith' and enables it after startup.#+begin_src  emacs-lisp(use-package! openwith  :config    (setq openwith-associations      (list       (list (openwith-make-extension-regexp              '("pdf" "heic" "png" "jpg" "flac"                "jpeg" "gif"))             "open"             '(file))       (list (openwith-make-extension-regexp              '("mpg" "mpeg" "mp3" "mp4"                "avi" "wmv" "wav" "mov" "flv"                "ogm" "ogg" "mkv" "flac"))             "vlc"             '(file))       ;; '("\\.chm" "kchmviewer" (file))       ))    )(add-hook! 'after-init-hook #'openwith-mode)#+end_srcNice function to sort a Dired buffer according to "Name", "Time", "Size", and "Directory/File"#+begin_src  emacs-lisp(defun xah-dired-sort ()  "Sort dired dir listing in different ways.   Prompt for a choice.   URL `http://ergoemacs.org/emacs/dired_sort.html'   Version 2015-07-30"  (interactive)  (let (-sort-by -arg)    (setq -sort-by (ido-completing-read "Sort by:" '( "time" "size" "name" "dir")))    (cond     ((equal -sort-by "name") (setq -arg "-agho --si --time-style long-iso "))     ((equal -sort-by "time") (setq -arg "-agho --si --time-style long-iso -t"))     ((equal -sort-by "size") (setq -arg "-agho --si --time-style long-iso -S"))     ((equal -sort-by "dir") (setq -arg "-agho --si --time-style long-iso --group-directories-first"))     (t (error "logic error 09535" )))    (dired-sort-other -arg )))#+end_srcFunction to get the size of a directory in Dired#+begin_src  emacs-lisp(defun dired-get-size () (interactive) (let ((files (dired-get-marked-files)))   (with-temp-buffer     (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)     (message "Size of all marked files: %s"              (progn                (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")                 (match-string 1))))))#+end_srcI prefer to not have a million Dired buffers be created when navigating. The 'dired+' package resuses the current Dired buffer when navigating.#+begin_src  emacs-lisp(use-package! dired+  :config  (diredp-toggle-find-file-reuse-dir 1)  (setq diredp-hide-details-initially-flag nil)  (setq diredp-hide-details-propagate-flag nil))#+end_srcConfigures 'dired-hide-dotfiles' and creates the following keybinding| COMMAND                  | DESCRIPTION                             | KEYBINDING ||--------------------------+-----------------------------------------+------------|| dired-hide-dotfiles-mode | Toggles showing/hiding dotfiles         | f          |#+begin_src  emacs-lisp(use-package! dired-hide-dotfiles  :hook (dired-mode . dired-hide-dotfiles-mode)  :config  (evil-collection-define-key 'normal 'dired-mode-map    "f" 'dired-hide-dotfiles-mode))#+end_srcScratch stuff I'm playing around with#+begin_src  emacs-lisp;; (map! :leader;;       :prefix "o";;       :desc "Dired at current location" "c" #'dired-jump;;       ;; :desc "Open $HOME in dired" "h" (λ! (dired-switch-to-dir "~/"));;       ;; :desc "Open root in dired"  "r" (λ! (dired-switch-to-dir "/"));;       )#+end_src* LSP SETTINGS| COMMAND                  | DESCRIPTION                       | KEYBINDING ||--------------------------+-----------------------------------+------------|| lsp-find-definition      | Jump to method definition         | SPC l d    || lsp-find-references      | Show method references            | SPC l r    |#+BEGIN_SRC emacs-lisp(setq display-line-numbers-type t)(map! :leader      (:prefix ("l" . "lsp")       :desc "Jump to method definition" "d" #'lsp-find-definition       :desc "Show method references" "r" #'lsp-find-references))#+END_SRC* MARKDOWN AND MMM-MODE#+BEGIN_SRC emacs-lisp(setq mmm-global-mode 'maybe)(defun my-mmm-markdown-auto-class (lang &optional submode)  "Define a mmm-mode class for LANG in `markdown-mode' using SUBMODE.If SUBMODE is not provided, use `LANG-mode' by default."  (let ((class (intern (concat "markdown-" lang)))        (submode (or submode (intern (concat lang "-mode"))))        (front (concat "^```" lang "[\n\r]+"))        (back "^```"))    (mmm-add-classes (list (list class :submode submode :front front :back back)))    (mmm-add-mode-ext-class 'markdown-mode nil class)))#+END_SRCMode names that derive directly from the language name#+BEGIN_SRC emacs-lisp(mapc 'my-mmm-markdown-auto-class      '("awk" "bibtex" "c" "cpp" "css" "html" "latex" "lisp" "makefile"        "markdown" "python" "r" "ruby" "sql" "stata" "xml" "cobol"))#+END_SRCMode names that differ from the language name#+BEGIN_SRC emacs-lisp(my-mmm-markdown-auto-class "fortran" 'f90-mode)(my-mmm-markdown-auto-class "perl" 'cperl-mode)(my-mmm-markdown-auto-class "shell" 'shell-script-mode)#+END_SRC* OTHERHere are some additional functions/macros that could help you configure Doom:- `load!' for loading external *.el files relative to this one- `use-package!' for configuring packages- `after!' for running code after a package has loaded- `add-load-path!' for adding directories to the `load-path', relative to  this file. Emacs searches the `load-path' when you load packages with  `require' or `use-package'.- `map!' for binding new keysTo get information about any of these functions/macros, move the cursor overthe highlighted symbol at press 'K' (non-evil users must press 'C-c c k').This will open documentation for it, including demos of how they are used.You can also try 'gd' (or 'C-c c d') to jump to their definition and see howthey are implemented.#+BEGIN_SRC emacs-lisp(use-package! ace-window  :config    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))(use-package! key-chord  :config    (key-chord-mode 1)    (setq key-chord-two-keys-delay 0.05)    (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)    (key-chord-define-global "vv" 'ace-window));;(add-to-list 'initial-frame-alist '(fullscreen . maximized))(setq initial-frame-alist      '(        ;;(top . 1)        ;;(left . 1)        (width . 143)        (height . 55)))(defun org-mode-<>-syntax-fix (start end)  (when (eq major-mode 'org-mode)    (save-excursion      (goto-char start)      (while (re-search-forward "<\\|>" end t)    (when (get-text-property (point) 'src-block)      ;; This is a < or > in an org-src block      (put-text-property (point) (1- (point))                 'syntax-table (string-to-syntax "_")))))))(after! org  (add-hook 'org-mode-hook (λ! (org-bullets-mode 1)))  (add-hook 'org-mode-hook      (λ!        (setq syntax-propertize-function 'org-mode-<>-syntax-fix)        (syntax-propertize (point-max))))  (setq org-directory "~/Org/"        org-agenda-files '("~/Org/agenda.org")        org-default-notes-file (expand-file-name "notes.org" org-directory)        org-ellipsis " ▼ "        org-log-done 'time        org-journal-dir "~/Org/journal/"        org-journal-date-format "%B %d, %Y (%A) "        org-journal-file-format "%Y-%m-%d.org"        org-hide-emphasis-markers t        ;; ex. of org-link-abbrev-alist in action        ;; [[arch-wiki:Name_of_Page][Description]]        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list          '(("google" . "http://www.google.com/search?q=")            ("arch-wiki" . "https://wiki.archlinux.org/index.php/")            ("ddg" . "https://duckduckgo.com/?q=")            ("wiki" . "https://en.wikipedia.org/wiki/"))        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords          '((sequence             "TODO(t)"           ; A task that is ready to be tackled             "BLOG(b)"           ; Blog writing assignments             "GYM(g)"            ; Things to accomplish at the gym             "PROJ(p)"           ; A project that contains other tasks             "VIDEO(v)"          ; Video assignments             "WAIT(w)"           ; Something is holding up this task             "|"                 ; The pipe necessary to separate "active" states and "inactive" states             "DONE(d)"           ; Task has been completed             "CANCELLED(c)" )))) ; Task has been cancelled(map! :leader      (:desc "Open in Finder" "z" #'reveal-in-osx-finder))(setq projectile-project-search-path '("~/dev/"))#+END_SRCTurn on global auto-revert buffer#+BEGIN_SRC emacs-lisp(global-auto-revert-mode 1)#+END_SRC* LANGUAGE SPECIFIC SETTINGS#+BEGIN_SRC emacs-lisp;; (when (executable-find "ipython");;  (setq python-shell-interpreter "ipython"))#+END_SRCCode to add hooks when opening a COBOL file. Turns on syntax highlightin with `cobol-mode` and enforces line length with `column-enforce-mode`#+BEGIN_SRC emacs-lisp(add-to-list 'auto-mode-alist             '("\\.cob\\'" . (λ! ()                               ;; add major mode setting here, if needed, for example:                               ;; (text-mode)                               (cobol-mode)                               (column-enforce-mode))))#+END_SRCDap-mode for Python#+BEGIN_SRC emacs-lisp;; (dap-register-debug-template;;   "Python :: Run (test)";;   (list :type "python";;         :cwd (file-name-directory buffer-file-name);;         :module "pytest";;         :request "launch";;         ;; :target-module (expand-file-name "~/src/myapp/.env/bin/myapp");;         :debugger 'debugpy;;         :name "Python :: Run (test)"))(use-package python-mode  :hook (python-mode . run-python)  :hook (python-mode . lsp-deferred)  :custom  (dap-python-executable "python3")  (dap-python-debugger 'debugpy))(add-hook 'java-mode-hook '(lambda() (gradle-mode 1)))(defun build-and-run ()	(interactive)	(gradle-run "build run"))(map! :map gradle-mode-map      :leader      :prefix ("j" . "java")      ;; basics      :desc "Gradel Build Run"          "r" #'build-and-run);; (define-key gradle-mode-map (kbd "C-c C-r") 'build-and-run)#+END_SRC* DAP-MODE SETTINGS| COMMAND     | DESCRIPTION                  | KEYBINDING ||-------------+------------------------------+------------|| dap-next    | Dap debugger next breakpoint | SPC d n    || dap-step-in | Dap debugger step into       | SPC d i    || dap-step-in | Dap debugger step into       | SPC d i    |#+BEGIN_SRC emacs-lisp(map! :map dap-mode-map      :leader      :prefix ("d" . "dap")      ;; basics      :desc "dap next"          "n" #'dap-next      :desc "dap step in"       "i" #'dap-step-in      :desc "dap step out"      "o" #'dap-step-out      :desc "dap continue"      "c" #'dap-continue      :desc "dap disconnect"    "x" #'dap-disconnect      :desc "dap hydra"         "h" #'dap-hydra      :desc "dap debug restart" "r" #'dap-debug-restart      :desc "dap debug"         "s" #'dap-debug      ;; debug      :prefix ("dd" . "Debug")      :desc "dap debug recent"  "r" #'dap-debug-recent      :desc "dap debug last"    "l" #'dap-debug-last      ;; eval      :prefix ("de" . "Eval")      :desc "eval"                "e" #'dap-eval      :desc "eval region"         "r" #'dap-eval-region      :desc "eval thing at point" "s" #'dap-eval-thing-at-point      :desc "add expression"      "a" #'dap-ui-expressions-add      :desc "remove expression"   "d" #'dap-ui-expressions-remove      :prefix ("db" . "Breakpoint")      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message);; (after! dap-mode;;   (setq dap-python-debugger 'debugpy))#+END_SRC* CUSTOM KEYBINDINGS#+BEGIN_SRC emacs-lisp(map! :leader      (:prefix ("b" . "buffer")       :desc "Kill buffers matching" "o" #'kill-matching-buffers))(map! :leader      (:prefix ("b" . "buffer")       :desc "Switch workspace buffer" "B" #'+vertico/switch-workspace-buffer))(map! :leader      (:prefix ("b" . "buffer")       :desc "Switch buffer" "b" #'switch-to-buffer))(set-fringe-style (quote (12 . 8)))(map! :leader      (:desc "Open Vterm" "v" #'vterm))(map! :leader      (:desc "Switch workspace buffer" "<" #'+vertico/switch-workspace-buffer))(map! :leader      (:desc "Switch buffer" "," #'switch-to-buffer))(map! :leader      (:desc "Kill buffer" "k" #'kill-buffer))#+END_SRC* EMACS APPLICATION FRAMEWORK#+BEGIN_SRC emacs-lisp;; (require 'eaf-demo);; (require 'eaf-file-sender);; (require 'eaf-music-player);; (require 'eaf-camera);; (require 'eaf-rss-reader);; (require 'eaf-terminal);; (require 'eaf-image-viewer);; (require 'eaf-vue-demo);; (require 'eaf-pdf-viewer);; (require 'eaf-browser);; (require 'eaf-markdown-previewer);; (require 'eaf-file-browser);; (require 'eaf-mermaid);; (require 'eaf-file-manager);; (require 'eaf-mindmap);; (require 'eaf-video-player);; (require 'eaf-org-previewer);; (require 'eaf-airshare);; (require 'eaf-jupyter);; (require 'eaf-netease-cloud-music);; (require 'eaf-git);; (require 'eaf-system-monitor)#+END_SRC#+BEGIN_SRC emacs-lisp(require 'org-tempo)(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))#+END_SRC* OPEN KEYBINDINGS#+BEGIN_SRC emacs-lisp(map! :leader      (:prefix ("o" . "open")       :desc "View Calendar" "g" #'calendar))#+END_SRC* OTHER CONFIG FILESCode to auto-tangle this zshrc.org file whenever it is saved to automatically produce the zshrc file.#+begin_src emacs-lisp(defun efs/org-babel-tangle-zshrc ()  (when (string-equal (buffer-file-name)                      (expand-file-name "~/.dotfiles/zshrc.org"))    (let ((org-confirm-babel-evaluate nil))      (org-babel-tangle))))(add-hook 'org-mode-hook (λ! (add-hook 'after-save-hook #'efs/org-babel-tangle-zshrc)))#+end_src