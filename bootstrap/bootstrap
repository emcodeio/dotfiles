#!/usr/bin/env bash

# Dotfiles and bootstrap installer
# Installs git, clones repository and symlinks dotfiles to your home directory

set -e
trap on_error SIGTERM

e='33'
RESET="${e}[0m"
BOLD="${e}[1m"
CYAN="${e}[0;96m"
RED="${e}[0;91m"
YELLOW="${e}[0;93m"
GREEN="${e}[0;92m"

_exists() {
  command -v "$1" >/dev/null 2>&1
}

# The check_exists function that uses _exists
check_exists() {
  if ! _exists "$1"; then
    echo "$1 doesn't exist, please install..."
    exit 1
  fi
}

# Success reporter
info() {
  echo -e "${CYAN}${*}${RESET}"
}

# Error reporter
error() {
  echo -e "${RED}${*}${RESET}"
}

# Success reporter
success() {
  echo -e "${GREEN}${*}${RESET}"
}

# End section
finish() {
  success "Done!"
  echo
  sleep 1
}

# Set directory
export DOTFILES=${1:-"$HOME/.dotfiles"}
GITHUB_REPO_URL_BASE="https://github.com/emcodeio/dotfiles"
HOMEBREW_INSTALLER_URL="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"

on_start() {
  info "           __        __   ____ _  __           "
  info "      ____/ /____   / /_ / __/(_)/ /___   _____"
  info "     / __  // __  / __// /_ / // // _  / ___/"
  info "  _ / /_/ // /_/ // /_ / __// // //  __/(__  ) "
  info " (_)__,_/ ____/ __//_/  /_//_/ ___//____/  "
  info "                                               "
  info "              by @emcodeio                     "
  info "                                               "

  info "This script will guide you through installing git, zsh and dofiles itself."
  echo "It will not install anything without your direct agreement!"
  echo
  read -p "Do you want to proceed with installation? [y/N] " -n 1 answer
  echo
  if [ "${answer}" != "y" ]; then
    exit
  fi
}

install_homebrew() {
  info "Trying to detect installed Homebrew..."

  if ! _exists brew; then
    echo "Seems like you don't have Homebrew installed!"
    read -p "Do you agree to proceed with Homebrew installation? [y/N] " -n 1 answer
    echo
    if [ "${answer}" != "y" ]; then
      return
    fi

    info "Installing Homebrew..."
    bash -c "$(curl -fsSL ${HOMEBREW_INSTALLER_URL})"
    eval "$(/usr/local/bin/brew shellenv)"
  else
    success "You already have Homebrew installed. Skipping..."
  fi

  finish
}

install_git() {
  info "Trying to detect installed Git..."

  if ! _exists git; then
    echo "Seems like you don't have Git installed!"
    read -p "Do you agree to proceed with Git installation? [y/N] " -n 1 answer
    echo
    if [ "${answer}" != "y" ]; then
      return
    fi

    info "Installing Git..."

    brew install git

  else
    success "You already have Git installed. Skipping..."
  fi

  finish
}

install_zsh() {
  info "Trying to detect installed Zsh..."

  if ! _exists zsh; then
    echo "Seems like you don't have Zsh installed!"
    read -p "Do you agree to proceed with Zsh installation? [y/N] " -n 1 answer
    echo
    if [ "${answer}" != "y" ]; then
      return
    fi

    info "Installing Zsh..."

    brew install zsh zsh-completions
  else
    success "You already have Zsh installed. Skipping..."
  fi

  if [ "$SHELL" != "/bin/zsh" ]; then
    info "Setting up Zsh as default shell..."

    echo "The script will ask you the password for sudo"
    echo "when changing your default shell via chsh -s:"
    echo

    chsh -s "$(command -v zsh)"
  fi

  # if _exists zsh && [[ -z "$ZSH_VERSION" ]]; then
  #   info "Setting up Zsh as default shell..."

  #   echo "The script will ask you the password for sudo:"
  #   echo
  #   echo "1) When changing your default shell via chsh -s"
  #   echo
  #   echo "$(command -v zsh)" | sudo tee -a '/etc/shells' >/dev/null

  #   chsh -s "$(command -v zsh)" || error "Error: Cannot set Zsh as default shell!"
  # fi

  finish
}

install_software() {
  info "Installing software..."

  cd "$DOTFILES"

  # Check if Brewfile exists before running brew bundle
  if _exists brew; then
    if [ "$MACHINE_TYPE" = "work" ]; then
      if [ -f "$DOTFILES/Brewfile_work" ]; then
        brew bundle --verbose --file="$DOTFILES/Brewfile_work"
      else
        error "Error: Brewfile_work not found"
        exit 1
      fi
    else
      if [ -f "$DOTFILES/Brewfile_personal" ]; then
        brew bundle --verbose --file="$DOTFILES/Brewfile_personal"
      else
        error "Error: Brewfile_personal not found"
        exit 1
      fi
    fi
  else
    error "Error: Brew is not available"
  fi

  cd -

  finish
}

install_doom() {

  info "Installing Doom Emacs..."

  if _exists ~/.emacs.d/bin/doom; then
    echo "Doom Emacs exists. Skipping..."
  else
    echo "Doom Emacs doesn't exist, continuing with install..."
    git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
    ~/.emacs.d/bin/doom install
  fi

  finish
}

install_fonts() {
  info "Installing fonts..."

  BASE_DIR="$HOME/.dotfiles/fonts"

  # Find and install all TTF and OTF fonts
  find "$BASE_DIR" -type f \( -name "*.ttf" -o -name "*.otf" \) -exec cp {} ~/Library/Fonts/ \;

  finish
}

setup_mu() {
  info "Setting up mu..."

  echo "Opening DavMail..."

  open -a davmail

  info "Press any key when DavMail is ready."

  read -n1 -s

  echo "Checking for requried packages."

  check_exists mu
  check_exists mbsync
  check_exists msmtp

  # Continue with the setup
  echo "mu, isync, and msmtp exist, continuing mu setup..."
  mbsync -aV
  mu init -m ~/.maildir --my-address evan_e@icloud.com --my-address evan@emcode.io --my-address evan.erksn@gmail.com --my-address ericenna@gmail.com --my-address eerickson@phasechange.ai
  mu index

  finish
}

on_finish() {
  echo
  success "Setup was successfully done!"
  success "Happy Coding!"
  echo
  echo -ne "$RED"'-_-_-_-_-_-_-_-_-_-_-_-_-_-_'
  echo -e "$RESET""$BOLD"',------,'"$RESET"
  echo -ne "$YELLOW"'-_-_-_-_-_-_-_-_-_-_-_-_-_-_'
  echo -e "$RESET""$BOLD"'|   /_/\'"$RESET"
  echo -ne "$GREEN"'-_-_-_-_-_-_-_-_-_-_-_-_-_-'
  echo -e "$RESET""$BOLD"'~|__( ^ .^)'"$RESET"
  echo -ne "$CYAN"'-_-_-_-_-_-_-_-_-_-_-_-_-_-_'
  echo -e "$RESET""$BOLD"'""  ""'"$RESET"
  echo
  info "P.S: Don't forget to restart a terminal :)"
  echo
}

on_error() {
  echo
  error "Wow... Something serious happened!"
  error "Though, I don't know what really happened :("
  echo
  exit 1
}

main() {
  on_start "$*"
  install_homebrew "$*"
  install_git "$*"
  install_zsh "$*"
  install_software "$*"
  install_doom "$*"
  install_fonts "$*"
  setup_mu "$*"
  on_finish "$*"
}

main "$*"
